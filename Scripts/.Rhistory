left_join(yearMean_stateHomePriceTimeSeries, by=c("fips", "date")) %>%
mutate(standardizedPrice = (price - meanPrice)/std)
head(stateHomePriceTimeSeries_standardized, 55)
library(ggplot2)
library(gganimate)
library(usmap)
ggplot(stateHomePriceTimeSeries_standardized, aes(x=standardizedPrice, y=date, color=RegionName)) + geom_line() + geom_smooth(method=lm)
library(ggplot2)
library(gganimate)
library(usmap)
ggplot(stateHomePriceTimeSeries_standardized, aes(x=standardizedPrice, y=date, color=RegionName)) + geom_line()
library(ggplot2)
library(gganimate)
library(usmap)
ggplot(stateHomePriceTimeSeries_standardized, aes(x=date, y=standardizedPrice, color=RegionName)) + geom_line()
library(ggplot2)
library(gganimate)
library(usmap)
ggplot(stateHomePriceTimeSeries_standardized, aes(x=date, y=standardizedPrice, color=RegionName)) + geom_line() + theme(legend.position="bottom") + guides(fill=guide_legend(nrow=5, byrow=TRUE))
library(ggplot2)
library(gganimate)
library(usmap)
ggplot(stateHomePriceTimeSeries_standardized, aes(x=date, y=standardizedPrice, color=RegionName)) + geom_line() + theme(legend.position="bottom") + guides(fill=guide_legend(nrow=2, byrow=TRUE))
library(ggplot2)
library(gganimate)
library(usmap)
ggplot(stateHomePriceTimeSeries_standardized, aes(x=date, y=standardizedPrice, color=RegionName)) + geom_line() + theme(legend.position="bottom") + guides(fill=guide_legend(nrow=10, byrow=TRUE))
?theme
?guides
library(ggplot2)
library(gganimate)
library(usmap)
ggplot(stateHomePriceTimeSeries_standardized, aes(x=date, y=standardizedPrice, color=RegionName)) + geom_line() + theme(legend.position="bottom") + guide_legend(nrow=10, byrow=TRUE)
library(ggplot2)
library(gganimate)
library(usmap)
ggplot(stateHomePriceTimeSeries_standardized, aes(x=date, y=standardizedPrice, color=RegionName)) + geom_line() + theme(legend.position="bottom") + guides(fill=guide_legend(nrow=10, byrow=TRUE))
library(ggplot2)
library(gganimate)
library(usmap)
ggplot(stateHomePriceTimeSeries_standardized, aes(x=date, y=standardizedPrice, color=RegionName)) + geom_line() + theme(legend.position="bottom") + guides(fill=guide_legend(nrow=4, byrow=TRUE))
library(ggplot2)
library(gganimate)
library(usmap)
ggplot(stateHomePriceTimeSeries_standardized, aes(x=date, y=standardizedPrice, color=RegionName)) + geom_line() + theme(legend.position="bottom") + guides(fill=guide_legend(nrow=4, byrow=FALSE))
library(ggplot2)
library(gganimate)
library(usmap)
ggplot(stateHomePriceTimeSeries_standardized, aes(x=date, y=standardizedPrice, color=RegionName)) + geom_line() + theme(legend.position="bottom") + guides(fill=guide_legend(nrow=4, byrow=TRUE))
library(ggplot2)
library(gganimate)
ggplot(stateHomePriceTimeSeries_standardized, aes(x=date, y=standardizedPrice, color=RegionName)) + geom_line() + theme(legend.position="bottom") + guides(fill=guide_legend(nrow=4, byrow=TRUE))
library(ggplot2)
ggplot(stateHomePriceTimeSeries_standardized, aes(x=date, y=standardizedPrice, color=RegionName)) + geom_line() + theme(legend.position="bottom") + guides(fill=guide_legend(nrow=4, byrow=TRUE))
library(ggplot2)
ggplot(stateHomePriceTimeSeries_standardized %>% filter(standardizedPrice > abs(.3)), aes(x=date, y=standardizedPrice, color=RegionName)) + geom_line() + theme(legend.position="bottom") + guides(fill=guide_legend(nrow=4, byrow=TRUE))
library(ggplot2)
ggplot(stateHomePriceTimeSeries_standardized %>% filter(standardizedPrice > abs(.5)), aes(x=date, y=standardizedPrice, color=RegionName)) + geom_line() + theme(legend.position="bottom") + guides(fill=guide_legend(nrow=4, byrow=TRUE))
library(ggplot2)
ggplot(stateHomePriceTimeSeries_standardized %>% filter(standardizedPrice > abs(.8)), aes(x=date, y=standardizedPrice, color=RegionName)) + geom_line() + theme(legend.position="bottom") + guides(fill=guide_legend(nrow=4, byrow=TRUE))
library(ggplot2)
ggplot(stateHomePriceTimeSeries_standardized %>% filter(standardizedPrice > abs(.5)), aes(x=date, y=standardizedPrice, color=RegionName)) + geom_line() + theme(legend.position="bottom") + guides(fill=guide_legend(nrow=4, byrow=TRUE))
library(ggplot2)
ggplot(stateHomePriceTimeSeries_standardized %>% filter(standardizedPrice > abs(.5)), aes(x=date, y=standardizedPrice, color=RegionName)) + geom_line() + theme(legend.position="bottom") + guides(fill=guide_legend(nrow=4, byrow=TRUE)) + ggtitle("Standardized Average Home Prices: z-score > |.5|") + ylab("standardized price") # for the y axis label
library(ggplot2)
ggplot(stateHomePriceTimeSeries_standardized %>% filter(standardizedPrice > abs(.5)), aes(x=date, y=standardizedPrice, color=RegionName)) + geom_line() + theme(legend.position="bottom", plot.title = element_text(hjust = 0.5)) + guides(fill=guide_legend(nrow=4, byrow=TRUE)) + ggtitle("Standardized Average Home Prices: z-score > |.5|") + ylab("standardized price") # for the y axis label
library(ggplot2)
ggplot(stateHomePriceTimeSeries_standardized %>% filter(standardizedPrice > abs(.75)), aes(x=date, y=standardizedPrice, color=RegionName)) + geom_line() + theme(legend.position="bottom", plot.title = element_text(hjust = 0.75)) + guides(fill=guide_legend(nrow=4, byrow=TRUE)) + ggtitle("Standardized Average Home Prices: z-score > |.5|") + ylab("standardized price")
ggplot(stateHomePriceTimeSeries_standardized %>% filter(standardizedPrice > abs(.75)), aes(x=date, y=standardizedPrice, color=RegionName)) + geom_line() + theme(legend.position="bottom", plot.title = element_text(hjust = 0.5)) + guides(fill=guide_legend(nrow=4, byrow=TRUE)) + ggtitle("Standardized Average Home Prices: z-score > |.75|") + ylab("standardized price")
library(ggplot2)
ggplot(stateHomePriceTimeSeries_standardized %>% filter(abs(standardizedPrice) > .75), aes(x=date, y=standardizedPrice, color=RegionName)) + geom_line() + theme(legend.position="bottom", plot.title = element_text(hjust = 0.5)) + guides(fill=guide_legend(nrow=4, byrow=TRUE)) + ggtitle("Standardized Average Home Prices: z-score > |.75|") + ylab("standardized price")
ggplot(stateHomePriceTimeSeries_standardized %>% filter(abs(standardizedPrice) > .25), aes(x=date, y=standardizedPrice, color=RegionName)) + geom_line() + theme(legend.position="bottom", plot.title = element_text(hjust = 0.5)) + guides(fill=guide_legend(nrow=4, byrow=TRUE)) + ggtitle("Standardized Average Home Prices: z-score > |.25|") + ylab("standardized price")
library(ggplot2)
ggplot(stateHomePriceTimeSeries_standardized %>% filter(abs(standardizedPrice) > .5), aes(x=date, y=standardizedPrice, color=RegionName)) + geom_line() + theme(legend.position="bottom", plot.title = element_text(hjust = 0.5)) + guides(fill=guide_legend(nrow=4, byrow=TRUE)) + ggtitle("Standardized Average Home Prices: z-score > |.5|") + ylab("standardized price")
library(ggplot2)
ggplot(stateHomePriceTimeSeries_standardized %>% filter(abs(standardizedPrice) > .75), aes(x=date, y=standardizedPrice, color=RegionName)) + geom_line() + theme(legend.position="bottom", plot.title = element_text(hjust = 0.5)) + guides(fill=guide_legend(nrow=4, byrow=TRUE)) + ggtitle("Standardized Average Home Prices: z-score > |.75|") + ylab("standardized price")
library(ggplot2)
ggplot(stateHomePriceTimeSeries_standardized %>% filter(abs(standardizedPrice) > .95), aes(x=date, y=standardizedPrice, color=RegionName)) + geom_line() + theme(legend.position="bottom", plot.title = element_text(hjust = 0.5)) + guides(fill=guide_legend(nrow=4, byrow=TRUE)) + ggtitle("Standardized Average Home Prices: |z-score| > .75") + ylab("standardized price")
library(ggplot2)
ggplot(stateHomePriceTimeSeries_standardized %>% filter(abs(standardizedPrice) > .95), aes(x=date, y=standardizedPrice, color=RegionName)) + geom_line() + theme(legend.position="bottom", plot.title = element_text(hjust = 0.5)) + guides(fill=FALSE) + ggtitle("Standardized Average Home Prices: |z-score| > .75") + ylab("standardized price")
ggplot(stateHomePriceTimeSeries_standardized %>% filter(abs(standardizedPrice) > .95), aes(x=date, y=standardizedPrice, color=RegionName)) + geom_line() + theme(legend.position="none", plot.title = element_text(hjust = 0.5)) + guides(fill=FALSE) + ggtitle("Standardized Average Home Prices: |z-score| > .75") + ylab("standardized price")
library(ggplot2)
ggplot(stateHomePriceTimeSeries_standardized %>% filter(abs(standardizedPrice) > .95), aes(x=date, y=standardizedPrice, color=RegionName)) + geom_line() + theme(legend.position="none", plot.title = element_text(hjust = 0.5)) + ggtitle("Standardized Average Home Prices: |z-score| > .75") + ylab("standardized price")
library(ggplot2)
ggplot(stateHomePriceTimeSeries_standardized, aes(x=date, y=standardizedPrice, color=RegionName)) + geom_line() + theme(legend.position="none", plot.title = element_text(hjust = 0.5)) + ggtitle("Standardized Average Home Prices by State") + ylab("standardized price")
ggplot(stateHomePriceTimeSeries_standardized %>% filter(abs(standardizedPrice) > .95), aes(x=date, y=standardizedPrice, color=RegionName)) + geom_line() + theme(legend.position="none", plot.title = element_text(hjust = 0.5)) + ggtitle("Standardized Average Home Prices: |z-score| > .75") + ylab("standardized price")
library(ggplot2)
ggplot(stateHomePriceTimeSeries_standardized, aes(x=date, y=standardizedPrice, color=RegionName)) + geom_line() + theme(legend.position="none", plot.title = element_text(hjust = 0.5)) + ggtitle("Standardized Average Home Prices by State") + ylab("standardized price")
ggplot(stateHomePriceTimeSeries_standardized %>% filter(abs(standardizedPrice) > .95), aes(x=date, y=standardizedPrice, color=RegionName)) + geom_line() + theme(legend.position="none", plot.title = element_text(hjust = 0.5)) + ggtitle("Standardized Average Home Prices: |z-score| > .75") + ylab("standardized price")
library(ggplot2)
ggplot(stateHomePriceTimeSeries_standardized, aes(x=date, y=standardizedPrice, color=RegionName)) + geom_line() + theme(legend.position="none", plot.title = element_text(hjust = 0.5)) + ggtitle("Standardized Average Home Prices by State") + ylab("standardized price")
ggplot(stateHomePriceTimeSeries_standardized), aes(x=date, y=standardizedPrice, color=RegionName)) + geom_line() + theme(legend.position="none", plot.title = element_text(hjust = 0.5)) + ggtitle("Standardized Average Home Prices") + ylab("standardized price")
library(ggplot2)
ggplot(stateHomePriceTimeSeries_standardized, aes(x=date, y=standardizedPrice, color=RegionName)) + geom_line() + theme(legend.position="none", plot.title = element_text(hjust = 0.5)) + ggtitle("Standardized Average Home Prices by State") + ylab("standardized price")
ggplot(stateHomePriceTimeSeries_standardized, aes(x=date, y=standardizedPrice, color=RegionName)) + geom_line() + theme(legend.position="none", plot.title = element_text(hjust = 0.5)) + ggtitle("Standardized Average Home Prices") + ylab("standardized price")
library(ggplot2)
ggplot(stateHomePriceTimeSeries_standardized, aes(x=date, y=standardizedPrice, color=RegionName)) + geom_line() + theme(legend.position="none", plot.title = element_text(hjust = 0.5)) + ggtitle("Standardized Average Home Prices by State") + ylab("standardized price")
ggplot(stateHomePriceTimeSeries_standardized, aes(x=date, y=standardizedPrice, color=RegionName)) + geom_line() + theme(legend.position="bottom", plot.title = element_text(hjust = 0.5)) + ggtitle("Standardized Average Home Prices") + ylab("standardized price")
library(ggplot2)
ggplot(stateHomePriceTimeSeries_standardized, aes(x=date, y=standardizedPrice, color=RegionName)) + geom_line() + theme(legend.position="none", plot.title = element_text(hjust = 0.5)) + ggtitle("Standardized Average Home Prices by State") + ylab("standardized price") + geom_text(aes(date, standardizedPrice, label = RegionName), data = stateHomePriceTimeSeries_standardized %>% filter(abs(standardizedPrice) > 1))
ggplot(stateHomePriceTimeSeries_standardized, aes(x=date, y=standardizedPrice, color=RegionName)) + geom_line() + theme(legend.position="bottom", plot.title = element_text(hjust = 0.5)) + ggtitle("Standardized Average Home Prices") + ylab("standardized price")
library(ggplot2)
ggplot(stateHomePriceTimeSeries_standardized, aes(x=date, y=standardizedPrice, color=RegionName)) + geom_line() + theme(legend.position="none", plot.title = element_text(hjust = 0.5)) + ggtitle("Standardized Average Home Prices by State") + ylab("standardized price") + geom_text(data = stateHomePriceTimeSeries_standardized %>% filter(abs(standardizedPrice) > 1))
library(ggplot2)
ggplot(stateHomePriceTimeSeries_standardized, aes(x=date, y=standardizedPrice, color=RegionName)) + geom_line() + theme(legend.position="none", plot.title = element_text(hjust = 0.5)) + ggtitle("Standardized Average Home Prices by State") + ylab("standardized price") + geom_text(label = RegionName), data = stateHomePriceTimeSeries_standardized %>% filter(abs(standardizedPrice) > 1))
library(ggplot2)
ggplot(stateHomePriceTimeSeries_standardized, aes(x=date, y=standardizedPrice, color=RegionName)) + geom_line() + theme(legend.position="none", plot.title = element_text(hjust = 0.5)) + ggtitle("Standardized Average Home Prices by State") + ylab("standardized price") + geom_text(aes(label = RegionName), data = stateHomePriceTimeSeries_standardized %>% filter(abs(standardizedPrice) > 1))
ggplot(stateHomePriceTimeSeries_standardized, aes(x=date, y=standardizedPrice, color=RegionName)) + geom_line() + theme(legend.position="bottom", plot.title = element_text(hjust = 0.5)) + ggtitle("Standardized Average Home Prices") + ylab("standardized price")
library(ggplot2)
ggplot(stateHomePriceTimeSeries_standardized, aes(x=date, y=standardizedPrice, color=RegionName)) + geom_line() + theme(legend.position="none", plot.title = element_text(hjust = 0.5)) + ggtitle("Standardized Average Home Prices by State") + ylab("standardized price") + geom_text(aes(label = RegionName), data = stateHomePriceTimeSeries_standardized %>% filter(abs(standardizedPrice) > 1) %>% select(year=2019))
library(ggplot2)
ggplot(stateHomePriceTimeSeries_standardized, aes(x=date, y=standardizedPrice, color=RegionName)) + geom_line() + theme(legend.position="none", plot.title = element_text(hjust = 0.5)) + ggtitle("Standardized Average Home Prices by State") + ylab("standardized price") + geom_text(aes(label = RegionName), data = stateHomePriceTimeSeries_standardized %>% filter(abs(standardizedPrice) > 1) %>% select(year=2019, na.rm=TRUE))
library(ggplot2)
ggplot(stateHomePriceTimeSeries_standardized, aes(x=date, y=standardizedPrice, color=RegionName)) + geom_line() + theme(legend.position="none", plot.title = element_text(hjust = 0.5)) + ggtitle("Standardized Average Home Prices by State") + ylab("standardized price") + geom_text(aes(label = RegionName), data = stateHomePriceTimeSeries_standardized %>% filter(abs(standardizedPrice) > 1) %>% select(year=2019 | year=NA))
library(ggplot2)
ggplot(stateHomePriceTimeSeries_standardized, aes(x=date, y=standardizedPrice, color=RegionName)) + geom_line() + theme(legend.position="none", plot.title = element_text(hjust = 0.5)) + ggtitle("Standardized Average Home Prices by State") + ylab("standardized price") + geom_text(aes(label = RegionName), data = stateHomePriceTimeSeries_standardized %>% filter(abs(standardizedPrice) > 1) %>% select(year==2019 | year==NA))
library(ggplot2)
ggplot(stateHomePriceTimeSeries_standardized, aes(x=date, y=standardizedPrice, color=RegionName)) + geom_line() + theme(legend.position="none", plot.title = element_text(hjust = 0.5)) + ggtitle("Standardized Average Home Prices by State") + ylab("standardized price") + geom_text(aes(label = RegionName), data = stateHomePriceTimeSeries_standardized %>% filter(abs(standardizedPrice) > 1) %>% select(date==as.Date("2019-04-01")))
library(ggplot2)
ggplot(stateHomePriceTimeSeries_standardized, aes(x=date, y=standardizedPrice, color=RegionName)) + geom_line() + theme(legend.position="none", plot.title = element_text(hjust = 0.5)) + ggtitle("Standardized Average Home Prices by State") + ylab("standardized price") + geom_text(aes(label = RegionName), data = stateHomePriceTimeSeries_standardized %>% filter(abs(standardizedPrice) > 1) %>% select(date=as.Date("2019-04-01")))
library(ggplot2)
ggplot(stateHomePriceTimeSeries_standardized, aes(x=date, y=standardizedPrice, color=RegionName)) + geom_line() + theme(legend.position="none", plot.title = element_text(hjust = 0.5)) + ggtitle("Standardized Average Home Prices by State") + ylab("standardized price") + geom_text(aes(label = RegionName), data = stateHomePriceTimeSeries_standardized %>% filter(abs(standardizedPrice) > 1) %>% select(as.character(date)="2019-04-01"))
library(ggplot2)
ggplot(stateHomePriceTimeSeries_standardized, aes(x=date, y=standardizedPrice, color=RegionName)) + geom_line() + theme(legend.position="none", plot.title = element_text(hjust = 0.5)) + ggtitle("Standardized Average Home Prices by State") + ylab("standardized price") + geom_text(aes(label = RegionName), data = stateHomePriceTimeSeries_standardized %>% filter(abs(standardizedPrice) > 1) %>% select(as.character(date)=="2019-04-01"))
library(ggplot2)
ggplot(stateHomePriceTimeSeries_standardized, aes(x=date, y=standardizedPrice, color=RegionName)) + geom_line() + theme(legend.position="none", plot.title = element_text(hjust = 0.5)) + ggtitle("Standardized Average Home Prices by State") + ylab("standardized price") + geom_text(aes(label = RegionName), data = stateHomePriceTimeSeries_standardized %>% filter(abs(standardizedPrice) > 1) %>% filter(as.character(date)=="2019-04-01"))
ggplot(stateHomePriceTimeSeries_standardized, aes(x=date, y=standardizedPrice, color=RegionName)) + geom_line() + theme(legend.position="bottom", plot.title = element_text(hjust = 0.5)) + ggtitle("Standardized Average Home Prices") + ylab("standardized price")
library(dplyr)
library(lubridate)
yearMean_stateHomePriceTimeSeries <- stateHomePriceTimeSeries %>%
dplyr::group_by(date) %>% mutate(meanPrice = mean(price, na.rm = TRUE), std = sd(price, na.rm = TRUE)) %>% select(fips,date,meanPrice,std)
stateHomePriceTimeSeries_standardized <- stateHomePriceTimeSeries %>%
left_join(yearMean_stateHomePriceTimeSeries, by=c("fips", "date")) %>%
mutate(standardizedPrice = (price - meanPrice)/std)
head(stateHomePriceTimeSeries_standardized, 5500)
library(dplyr)
library(lubridate)
yearMean_stateHomePriceTimeSeries <- stateHomePriceTimeSeries %>%
dplyr::group_by(date) %>% mutate(meanPrice = mean(price, na.rm = TRUE), std = sd(price, na.rm = TRUE)) %>% select(fips,date,meanPrice,std)
stateHomePriceTimeSeries_standardized <- stateHomePriceTimeSeries %>%
left_join(yearMean_stateHomePriceTimeSeries, by=c("fips", "date")) %>%
mutate(standardizedPrice = (price - meanPrice)/std)
head(stateHomePriceTimeSeries_standardized, 550000)
library(ggplot2)
ggplot(stateHomePriceTimeSeries_standardized, aes(x=date, y=standardizedPrice, color=RegionName)) + geom_line() + theme(legend.position="none", plot.title = element_text(hjust = 0.5)) + ggtitle("Standardized Average Home Prices by State") + ylab("standardized price") + geom_text(aes(label = RegionName), data = stateHomePriceTimeSeries_standardized %>% filter(abs(standardizedPrice) > 1) %>% filter(as.character(date)=="2019-02-01"))
ggplot(stateHomePriceTimeSeries_standardized, aes(x=date, y=standardizedPrice, color=RegionName)) + geom_line() + theme(legend.position="bottom", plot.title = element_text(hjust = 0.5)) + ggtitle("Standardized Average Home Prices") + ylab("standardized price")
library(ggplot2)
ggplot(stateHomePriceTimeSeries_standardized, aes(x=date, y=standardizedPrice, color=RegionName)) + geom_line() + theme(legend.position="none", plot.title = element_text(hjust = 0.5)) + ggtitle("Standardized Average Home Prices by State") + ylab("standardized price") + geom_text(aes(label = RegionName), data = stateHomePriceTimeSeries_standardized %>% filter(abs(standardizedPrice) > 1) %>% filter(as.character(date)=="2019-02-01"), check_overlap = TRUE)
ggplot(stateHomePriceTimeSeries_standardized, aes(x=date, y=standardizedPrice, color=RegionName)) + geom_line() + theme(legend.position="bottom", plot.title = element_text(hjust = 0.5)) + ggtitle("Standardized Average Home Prices") + ylab("standardized price")
library(ggplot2)
ggplot(stateHomePriceTimeSeries_standardized, aes(x=date, y=standardizedPrice, color=RegionName)) +
geom_line() +
theme(legend.position="none", plot.title = element_text(hjust = 0.5)) +
ggtitle("Standardized Average Home Prices by State") + ylab("standardized price") +
geom_text(aes(label = RegionName), data = stateHomePriceTimeSeries_standardized %>% filter(abs(standardizedPrice) > 1) %>% filter(as.character(date)=="2019-02-01"), check_overlap = TRUE)
#ggplot(stateHomePriceTimeSeries_standardized, aes(x=date, y=standardizedPrice, color=RegionName)) + geom_line() + theme(legend.position="bottom", plot.title = element_text(hjust = 0.5)) + ggtitle("Standardized Average Home Prices") + ylab("standardized price")
library(ggplot2)
ggplot(stateHomePriceTimeSeries_standardized, aes(x=date, y=standardizedPrice, color=RegionName)) +
geom_line() + geom_path() +
theme(legend.position="none", plot.title = element_text(hjust = 0.5)) +
ggtitle("Standardized Average Home Prices by State") + ylab("standardized price") +
geom_text(aes(label = RegionName), data = stateHomePriceTimeSeries_standardized %>% filter(abs(standardizedPrice) > 1) %>% filter(as.character(date)=="2019-02-01"), check_overlap = TRUE)
#ggplot(stateHomePriceTimeSeries_standardized, aes(x=date, y=standardizedPrice, color=RegionName)) + geom_line() + theme(legend.position="bottom", plot.title = element_text(hjust = 0.5)) + ggtitle("Standardized Average Home Prices") + ylab("standardized price")
library(ggplot2)
ggplot(stateHomePriceTimeSeries_standardized, aes(x=date, y=standardizedPrice, color=RegionName)) +
geom_line() +
theme(legend.position="none", plot.title = element_text(hjust = 0.5)) +
ggtitle("Standardized Average Home Prices by State") + ylab("standardized price") +
geom_text(aes(label = RegionName), data = stateHomePriceTimeSeries_standardized %>% filter(abs(standardizedPrice) > 1) %>% filter(as.character(date)=="2019-02-01"), check_overlap = TRUE)
#ggplot(stateHomePriceTimeSeries_standardized, aes(x=date, y=standardizedPrice, color=RegionName)) + geom_line() + theme(legend.position="bottom", plot.title = element_text(hjust = 0.5)) + ggtitle("Standardized Average Home Prices") + ylab("standardized price")
library(dplyr)
library(lubridate)
yearMean_statePopulations <- statePopulations %>%
dplyr::group_by(date) %>% mutate(meanPopulation = mean(population, na.rm = TRUE), std = sd(population, na.rm = TRUE)) %>% select(fips,date,meanPopulation,std)
library(dplyr)
library(tidyr)
library(lubridate)
library(cdlTools)
stateLandArea <- read.csv("D:/Documents/Semester4/HONR238V/HONR238V/Data/state_land_area.csv") %>%
mutate(squareMiles = as.numeric(sub(",", "", as.character(squareMiles), fixed = TRUE)), fips = as.integer(fips(state)))
head(stateLandArea, 1000)
statePopulations <- read.csv("D:/Documents/Semester4/HONR238V/HONR238V/Data/state_populations.csv") %>%
mutate(date = as.Date(DATE)) %>%
select(-c(DATE)) %>%
filter(year(date) >= 1996) %>%
gather(state, population, -c(date)) %>%
mutate(year = as.integer(year(date)), state = substr(state, 0, 2), fips = as.integer(fips(state)), population = population*1000) %>%
select(-c(state)) %>%
left_join(stateLandArea, by=c("fips")) %>%
mutate(density = population/squareMiles)
head(statePopulations, 1000)
library(dplyr)
library(lubridate)
yearMean_statePopulations <- statePopulations %>%
dplyr::group_by(date) %>% mutate(meanPopulation = mean(population, na.rm = TRUE), std = sd(population, na.rm = TRUE)) %>% select(fips,date,meanPopulation,std)
statePopulations_standardized <- statePopulations %>%
left_join(yearMean_statePopulations, by=c("fips", "date")) %>%
mutate(standardizedPopulation = (population - meanPopulation)/std)
head(statePopulations_standardized, 55)
library(ggplot2)
library(gganimate)
library(usmap)
plot_usmap(data = statePopulations, values = "standardizedPopulation", lines = "black") +
scale_fill_continuous(low = "white", high = "blue", name = "Z-Score") +
theme(legend.position = "right") +
labs(title = 'Date: {frame_time}   Standardized Average Popluations by State') +
transition_time(date)
library(dplyr)
library(lubridate)
yearMean_statePopulations <- statePopulations %>%
dplyr::group_by(date) %>% mutate(meanPopulation = mean(population, na.rm = TRUE), std = sd(population, na.rm = TRUE)) %>% select(fips,date,meanPopulation,std)
statePopulations_standardized <- statePopulations %>%
left_join(yearMean_statePopulations, by=c("fips", "date")) %>%
mutate(standardizedPopulation = (population - meanPopulation)/std)
head(statePopulations_standardized, 55)
library(ggplot2)
library(gganimate)
library(usmap)
plot_usmap(data = statePopulations_standardized, values = "standardizedPopulation", lines = "black") +
scale_fill_continuous(low = "white", high = "blue", name = "Z-Score") +
theme(legend.position = "right") +
labs(title = 'Date: {frame_time}   Standardized Average Popluations by State') +
transition_time(date)
library(ggplot2)
library(gganimate)
library(usmap)
plot_usmap(data = statePopulations, values = "density", lines = "black") +
scale_fill_continuous(low = "white", high = "blue", name = "Z-Score") +
theme(legend.position = "right") +
labs(title = 'Date: {frame_time}   Population Density by State') +
transition_time(date)
library(ggplot2)
library(gganimate)
library(usmap)
plot_usmap(data = statePopulations, values = "population", lines = "black") +
scale_fill_continuous(low = "white", high = "blue", name = "Z-Score") +
theme(legend.position = "right") +
labs(title = 'Date: {frame_time}   Population by State') +
transition_time(date)
library(gganimate)
library(usmap)
library(ggplot2)
stateHomePriceTimeSeries2000 <- stateHomePriceTimeSeries %>% filter(date == as.Date("2000-04-01"))
plot_usmap(data = stateHomePriceTimeSeries2000, values = "price", lines = "black") +
scale_fill_continuous(low = "white", high = "red", name = "Home Price", label = scales::comma) +
theme(legend.position = "right") + ggtitle("US Home Prices by State")
statePopulations2000 <- statePopulations %>% filter(year(date) == 2018)
plot_usmap(data = statePopulations2000, values = "density", lines = "dark blue") +
scale_fill_continuous(low = "white", high = "blue", name = "Population Density", label = scales::comma) +
theme(legend.position = "right", plot.title = element_text(hjust = 0.5)) + ggtitle("Population Density by State")
library(gganimate)
library(usmap)
library(ggplot2)
stateHomePriceTimeSeries2000 <- stateHomePriceTimeSeries %>% filter(date == as.Date("2000-04-01"))
plot_usmap(data = stateHomePriceTimeSeries2000, values = "price", lines = "black") +
scale_fill_continuous(low = "white", high = "red", name = "Home Price", label = scales::comma) +
theme(legend.position = "right") + ggtitle("US Home Prices by State")
statePopulations2000 <- statePopulations %>% filter(year(date) == 2017)
plot_usmap(data = statePopulations2000, values = "density", lines = "dark blue") +
scale_fill_continuous(low = "white", high = "blue", name = "Population Density", label = scales::comma) +
theme(legend.position = "right", plot.title = element_text(hjust = 0.5)) + ggtitle("Population Density by State")
library(gganimate)
library(usmap)
library(ggplot2)
stateHomePriceTimeSeries2000 <- stateHomePriceTimeSeries %>% filter(date == as.Date("2000-04-01"))
plot_usmap(data = stateHomePriceTimeSeries2000, values = "price", lines = "black") +
scale_fill_continuous(low = "white", high = "red", name = "Home Price", label = scales::comma) +
theme(legend.position = "right") + ggtitle("US Home Prices by State")
statePopulations2000 <- statePopulations %>% filter(year(date) == 2017)
plot_usmap(data = statePopulations2000, values = "density", lines = "dark blue") +
scale_fill_continuous(low = "white", high = "blue", name = "Population Density", label = scales::comma) +
theme(legend.position = "right", plot.title = element_text(hjust = 0.5)) + ggtitle("Population Density by State")
library(dplyr)
library(tidyr)
library(lubridate)
library(cdlTools)
stateLandArea <- read.csv("D:/Documents/Semester4/HONR238V/HONR238V/Data/state_land_area.csv") %>%
mutate(squareMiles = as.numeric(sub(",", "", as.character(squareMiles), fixed = TRUE)), fips = as.integer(fips(state)))
head(stateLandArea, 1000)
statePopulations <- read.csv("D:/Documents/Semester4/HONR238V/HONR238V/Data/state_populations.csv") %>%
mutate(date = as.Date(DATE)) %>%
select(-c(DATE)) %>%
filter(year(date) >= 1996) %>%
gather(state, population, -c(date)) %>%
mutate(year = as.integer(year(date)), state = substr(state, 0, 2), fips = as.integer(fips(state)), population = population*1000) %>%
select(-c(state)) %>%
left_join(stateLandArea, by=c("fips")) %>%
mutate(density = population/squareMiles)
head(statePopulations, 1000)
library(dplyr)
library(tidyr)
library(lubridate)
library(cdlTools)
stateLandArea <- read.csv("D:/Documents/Semester4/HONR238V/HONR238V/Data/state_land_area.csv") %>%
mutate(squareMiles = as.numeric(sub(",", "", as.character(squareMiles), fixed = TRUE)), fips = as.integer(fips(state)))
head(stateLandArea, 1000)
fips = as.integer(fips("Delaware")
statePopulations <- read.csv("D:/Documents/Semester4/HONR238V/HONR238V/Data/state_populations.csv") %>%
library(dplyr)
library(tidyr)
library(lubridate)
library(cdlTools)
stateLandArea <- read.csv("D:/Documents/Semester4/HONR238V/HONR238V/Data/state_land_area.csv") %>%
mutate(squareMiles = as.numeric(sub(",", "", as.character(squareMiles), fixed = TRUE)), fips = as.integer(fips(state)))
head(stateLandArea, 1000)
fips = as.integer(fips("Delaware"))
statePopulations <- read.csv("D:/Documents/Semester4/HONR238V/HONR238V/Data/state_populations.csv") %>%
mutate(date = as.Date(DATE)) %>%
select(-c(DATE)) %>%
filter(year(date) >= 1996) %>%
gather(state, population, -c(date)) %>%
mutate(year = as.integer(year(date)), state = substr(state, 0, 2), fips = as.integer(fips(state)), population = population*1000) %>%
select(-c(state)) %>%
left_join(stateLandArea, by=c("fips")) %>%
mutate(density = population/squareMiles)
head(statePopulations, 1000)
library(dplyr)
library(tidyr)
library(lubridate)
library(cdlTools)
stateLandArea <- read.csv("D:/Documents/Semester4/HONR238V/HONR238V/Data/state_land_area.csv") %>%
mutate(squareMiles = as.numeric(sub(",", "", as.character(squareMiles), fixed = TRUE)), fips = as.integer(fips(state)))
head(stateLandArea, 1000)
as.integer(fips("Delaware"))
statePopulations <- read.csv("D:/Documents/Semester4/HONR238V/HONR238V/Data/state_populations.csv") %>%
mutate(date = as.Date(DATE)) %>%
select(-c(DATE)) %>%
filter(year(date) >= 1996) %>%
gather(state, population, -c(date)) %>%
mutate(year = as.integer(year(date)), state = substr(state, 0, 2), fips = as.integer(fips(state)), population = population*1000) %>%
select(-c(state)) %>%
left_join(stateLandArea, by=c("fips")) %>%
mutate(density = population/squareMiles)
head(statePopulations, 1000)
library(dplyr)
library(tidyr)
library(lubridate)
library(cdlTools)
stateLandArea <- read.csv("D:/Documents/Semester4/HONR238V/HONR238V/Data/state_land_area.csv") %>%
mutate(squareMiles = as.numeric(sub(",", "", as.character(squareMiles), fixed = TRUE)), fips = as.integer(fips(state)))
head(stateLandArea, 1000)
as.integer(fips("DE"))
statePopulations <- read.csv("D:/Documents/Semester4/HONR238V/HONR238V/Data/state_populations.csv") %>%
mutate(date = as.Date(DATE)) %>%
select(-c(DATE)) %>%
filter(year(date) >= 1996) %>%
gather(state, population, -c(date)) %>%
mutate(year = as.integer(year(date)), state = substr(state, 0, 2), fips = as.integer(fips(state)), population = population*1000) %>%
select(-c(state)) %>%
left_join(stateLandArea, by=c("fips")) %>%
mutate(density = population/squareMiles)
head(statePopulations, 1000)
library(dplyr)
library(tidyr)
library(lubridate)
library(cdlTools)
stateLandArea <- read.csv("D:/Documents/Semester4/HONR238V/HONR238V/Data/state_land_area.csv") %>%
mutate(squareMiles = as.numeric(sub(",", "", as.character(squareMiles), fixed = TRUE)), fips = as.integer(fips(state)))
head(stateLandArea, 1000)
as.integer(fips("Delaware"))
statePopulations <- read.csv("D:/Documents/Semester4/HONR238V/HONR238V/Data/state_populations.csv") %>%
mutate(date = as.Date(DATE)) %>%
select(-c(DATE)) %>%
filter(year(date) >= 1996) %>%
gather(state, population, -c(date)) %>%
mutate(year = as.integer(year(date)), state = substr(state, 0, 2), fips = as.integer(fips(state)), population = population*1000) %>%
select(-c(state)) %>%
left_join(stateLandArea, by=c("fips")) %>%
mutate(density = population/squareMiles)
head(statePopulations, 1000)
library(dplyr)
library(tidyr)
library(lubridate)
library(cdlTools)
stateLandArea <- read.csv("D:/Documents/Semester4/HONR238V/HONR238V/Data/state_land_area.csv") %>%
mutate(squareMiles = as.numeric(sub(",", "", as.character(squareMiles), fixed = TRUE)), fips = as.integer(fips(state)))
head(stateLandArea, 1000)
statePopulations <- read.csv("D:/Documents/Semester4/HONR238V/HONR238V/Data/state_populations.csv") %>%
mutate(date = as.Date(DATE)) %>%
select(-c(DATE)) %>%
filter(year(date) >= 1996) %>%
gather(state, population, -c(date)) %>%
mutate(year = as.integer(year(date)), state = substr(state, 0, 2), fips = as.integer(fips(state)), population = population*1000) %>%
select(-c(state)) %>%
left_join(stateLandArea, by=c("fips")) %>%
mutate(density = population/squareMiles)
head(statePopulations, 1000)
library(gganimate)
library(usmap)
library(ggplot2)
stateHomePriceTimeSeries2000 <- stateHomePriceTimeSeries %>% filter(date == as.Date("2000-04-01"))
plot_usmap(data = stateHomePriceTimeSeries2000, values = "price", lines = "black") +
scale_fill_continuous(low = "white", high = "red", name = "Home Price", label = scales::comma) +
theme(legend.position = "right") + ggtitle("US Home Prices by State")
statePopulations2000 <- statePopulations %>% filter(year(date) == 2017)
plot_usmap(data = statePopulations2000, values = "density", lines = "dark blue") +
scale_fill_continuous(low = "white", high = "blue", name = "Population Density", label = scales::comma) +
theme(legend.position = "right", plot.title = element_text(hjust = 0.5)) + ggtitle("Population Density by State")
library(dplyr)
library(tidyr)
library(lubridate)
library(cdlTools)
stateLandArea <- read.csv("D:/Documents/Semester4/HONR238V/HONR238V/Data/state_land_area.csv") %>%
mutate(squareMiles = as.numeric(sub(",", "", as.character(squareMiles), fixed = TRUE)), fips = as.integer(fips(state)))
head(stateLandArea, 1000)
statePopulations <- read.csv("D:/Documents/Semester4/HONR238V/HONR238V/Data/state_populations.csv") %>%
mutate(date = as.Date(DATE)) %>%
select(-c(DATE)) %>%
filter(year(date) >= 1996) %>%
gather(state, population, -c(date)) %>%
mutate(year = as.integer(year(date)), state = substr(state, 0, 2), fips = as.integer(fips(state)), population = population*1000) %>%
select(-c(state)) %>%
left_join(stateLandArea, by=c("fips")) %>%
mutate(density = population/squareMiles)
head(statePopulations, 1000)
library(gganimate)
library(usmap)
library(ggplot2)
stateHomePriceTimeSeries2000 <- stateHomePriceTimeSeries %>% filter(date == as.Date("2000-04-01"))
plot_usmap(data = stateHomePriceTimeSeries2000, values = "price", lines = "black") +
scale_fill_continuous(low = "white", high = "red", name = "Home Price", label = scales::comma) +
theme(legend.position = "right") + ggtitle("US Home Prices by State")
statePopulations2000 <- statePopulations %>% filter(year(date) == 2017)
plot_usmap(data = statePopulations2000, values = "density", lines = "dark blue") +
scale_fill_continuous(low = "white", high = "blue", name = "Population Density", label = scales::comma) +
theme(legend.position = "right", plot.title = element_text(hjust = 0.5)) + ggtitle("Population Density by State")
library(dplyr)
library(tidyr)
library(lubridate)
library(cdlTools)
stateLandArea <- read.csv("D:/Documents/Semester4/HONR238V/HONR238V/Data/state_land_area.csv") %>%
mutate(squareMiles = as.numeric(sub(",", "", as.character(squareMiles), fixed = TRUE)), fips = as.integer(fips(state)))
head(stateLandArea, 1000)
statePopulations <- read.csv("D:/Documents/Semester4/HONR238V/HONR238V/Data/state_populations.csv") %>%
mutate(date = as.Date(DATE)) %>%
select(-c(DATE)) %>%
filter(year(date) >= 1996) %>%
gather(state, population, -c(date)) %>%
mutate(year = as.integer(year(date)), state = substr(state, 0, 2), fips = as.integer(fips(state)), population = population*1000) %>%
select(-c(state)) %>%
left_join(stateLandArea, by=c("fips")) %>%
mutate(density = population/squareMiles)
head(statePopulations, 1000)
library(gganimate)
library(usmap)
library(ggplot2)
stateHomePriceTimeSeries2000 <- stateHomePriceTimeSeries %>% filter(date == as.Date("2000-04-01"))
plot_usmap(data = stateHomePriceTimeSeries2000, values = "price", lines = "black") +
scale_fill_continuous(low = "white", high = "red", name = "Home Price", label = scales::comma) +
theme(legend.position = "right") + ggtitle("US Home Prices by State")
statePopulations2000 <- statePopulations %>% filter(year(date) == 2017)
plot_usmap(data = statePopulations2000, values = "density", lines = "dark blue") +
scale_fill_continuous(low = "white", high = "blue", name = "Population Density", label = scales::comma) +
theme(legend.position = "right", plot.title = element_text(hjust = 0.5)) + ggtitle("Population Density by State")
library(gganimate)
library(usmap)
library(ggplot2)
stateHomePriceTimeSeries2000 <- stateHomePriceTimeSeries %>% filter(date == as.Date("2000-04-01"))
plot_usmap(data = stateHomePriceTimeSeries2000, values = "price", lines = "black") +
scale_fill_continuous(low = "white", high = "red", name = "Home Price", label = scales::comma) +
theme(legend.position = "right") + ggtitle("US Home Prices by State")
statePopulations2000 <- statePopulations %>% filter(year(date) == 2017)
plot_usmap(data = statePopulations2000, values = "density", lines = "dark blue") +
scale_fill_continuous(low = "white", high = "blue", name = "Population Density", label = scales::comma) +
theme(legend.position = "right", plot.title = element_text(hjust = 0.5)) + ggtitle("Population Density by State") + geom_text(aes(label = density), data = statePopulations2000, check_overlap = TRUE)
library(gganimate)
library(usmap)
library(ggplot2)
stateHomePriceTimeSeries2000 <- stateHomePriceTimeSeries %>% filter(date == as.Date("2000-04-01"))
plot_usmap(data = stateHomePriceTimeSeries2000, values = "price", lines = "black") +
scale_fill_continuous(low = "white", high = "red", name = "Home Price", label = scales::comma) +
theme(legend.position = "right") + ggtitle("US Home Prices by State")
statePopulations2000 <- statePopulations %>% filter(year(date) == 2017)
plot_usmap(data = statePopulations2000, values = "density", lines = "dark blue") +
scale_fill_continuous(low = "white", high = "blue", name = "Population Density", label = scales::comma) +
theme(legend.position = "right", plot.title = element_text(hjust = 0.5)) + ggtitle("Population Density by State") + geom_text(aes(x=date,y=fips,label = density), data = statePopulations2000, check_overlap = TRUE)
library(gganimate)
library(usmap)
library(ggplot2)
stateHomePriceTimeSeries2000 <- stateHomePriceTimeSeries %>% filter(date == as.Date("2000-04-01"))
plot_usmap(data = stateHomePriceTimeSeries2000, values = "price", lines = "black") +
scale_fill_continuous(low = "white", high = "red", name = "Home Price", label = scales::comma) +
theme(legend.position = "right") + ggtitle("US Home Prices by State")
statePopulations2000 <- statePopulations %>% filter(year(date) == 2017)
plot_usmap(data = statePopulations2000, values = "density", lines = "dark blue") +
scale_fill_continuous(low = "white", high = "blue", name = "Population Density", label = scales::comma) +
theme(legend.position = "right", plot.title = element_text(hjust = 0.5)) + ggtitle("Population Density by State")
library(gganimate)
library(usmap)
library(ggplot2)
stateHomePriceTimeSeries2000 <- stateHomePriceTimeSeries %>% filter(date == as.Date("2000-04-01"))
plot_usmap(data = stateHomePriceTimeSeries2000, values = "price", lines = "black") +
scale_fill_continuous(low = "white", high = "red", name = "Home Price", label = scales::comma) +
theme(legend.position = "right") + ggtitle("US Home Prices by State")
statePopulations2000 <- statePopulations %>% filter(year(date) == 2017)
plot_usmap(data = statePopulations2000, values = "density", lines = "black") +
scale_fill_continuous(low = "white", high = "blue", name = "Population Density", label = scales::comma) +
theme(legend.position = "right", plot.title = element_text(hjust = 0.5)) + ggtitle("Population Density by State")
library(ggplot2)
library(gganimate)
library(usmap)
plot_usmap(data = statePopulations, values = "density", lines = "black") +
scale_fill_continuous(low = "white", high = "blue", name = "Residents/square mile") +
theme(legend.position = "right") +
labs(title = 'Date: {frame_time}   Population Density by State') +
transition_time(date)
library(ggplot2)
ggplot(stateHomePriceTimeSeries_standardized, aes(x=date, y=standardizedPrice, color=RegionName)) +
geom_line() +
theme(legend.position="none", plot.title = element_text(hjust = 0.5)) +
ggtitle("Standardized Average Home Prices by State") + ylab("standardized price") +
geom_text(aes(label = RegionName), data = stateHomePriceTimeSeries_standardized %>% filter(abs(standardizedPrice) > 1) %>% filter(as.character(date)=="2019-02-01"), check_overlap = TRUE)
